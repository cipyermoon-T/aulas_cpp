na aula 3 aprendemos apenas a biblioteca iostream para envio de dados e output dos dados com o cout

4- aprendemos a declarar varios tipos de variaveis como int, char, double, float, bool, string e assim vai.
5- aprendemos a usar define #define canal cout << "Eu sou legal"; então quando eu digitar "canal" no codigo, ele vai puxar todo o codigo que estaa dentro dele o seja, o cout;
6- aprendemos q a resposta de duas variaveis ou mais, podem ficar armazenada em uma variavel, res = n1/n2 e também os operadores matematicos + - / * % ()
7- aprendemos sobre decremento e incremendo, tanto na forma basica usando i = i + 1, quanto na simples i++ com pós-incremento e o ++i com pre-incremento, e que fuciona pra todos os operadores matematicos. i *= 5, i /= 5......
8- mostra como deixa um numero positivo negativo ou vice e versa, que é somente multiplicando por 1, mas mostra que no c++ tem a inversão permanente que é quando armazena em uma variavel, e a inversão momentanea, que so faz a inversão no cout e depois volta a o normal.
9- mostra como usar o if e else, estrutura condicional;
10- aprendemos a usar variavel: goto variavel; para loop, e a como usar o char e if para ir ao inicio... é feito uma conta de media, e quando o codigo acaba, o programa vai perguntar se voce deseja digitar outras notas, s para sim e n para nao, entao no if se a variavel opc == s ou opc == S ele limpa a tela com system("clear") e da goto inicio;
11- aprendemos a usar menor que ou maior que < > ou igual <= >=, e também os operadores && = e  || = ou, e também o operador de negação ! ou seja !sim = não, !true = false
12- aprendemos a usar o operador ternario, que basimento ele é um if, porem mais simples, ele é usado com ? res = (nota >= 7) ? "Aprovado" : "Reprovado"; se a nota for maior que 7 ele retorna o primeiro valor, se for menos ele retorna o segundo respectivamente true or false.
13- aprendemos usar switch case, onde dentro do switch vai ter um valor, e ele vai coferir dentro dos cases se tem alguem com esse valor, se tiver ele vai entrar no case. e caso tenha um case vazio e em seguida um case com bloco de codigo escrito ele vai considerar que o 1 seja o 2, no exemplo do codigo ele demonstra muito bem, ele pede para que voce escolha opções de transporte, entre elas tem 1 carro e 2 moto, no case o 1 esta vazio porem o dois esta escrito e da que a pessoa escolheu um transporte terreste, e dentro dele vai ter outro case 1 e 2 informando se escolheu carro e moto, ou seja, voce pode repetir cases, eu nao sei explicar muito bem, porque so é possivel entender dando exemplos do codigo, mas tudo está na pasta então tudo bem.
14- mostrado como funciona o while
15, 16- mostrado como funciona o do while, do é faça o comando, e o while é enquanto basicamente, faça enquanto cont < 20.
17- como funciona o for, é onde voce tem um indice, a condição do indice, e que ele ira fazer caso seja verdadeiro: for(i = 0; i < 10; i++){} e depois o bloco de codigo pra ele executar enquanto i < 10
18- como usar vetores int vetor[5] = {10, 20, 30, 40, 50} o vetor não é o valor mas sim as posiçoes que estão sendo armazenada os valores ou seja vetor[0] vai retornar 10 o vetor[1] vai retornar 20, o vetor[5] nao retorna nada, já que ultrapassou o espaço, já que o contador começa do zero o vetor vai acabar no [4] porque 0, 1, 2, 3, 4 deu um total de 5 numeros.
19- aprendemos a usar matriz bidirecional, onde são dois valores, int matriz [3][4], onde são respectivamente Linha e Coluna.
21- apresentado novas bibliotecas string.h e sdtlib, e também é ensinado a como usar argc e argv que nos retornam valores informados no terminal por exemplo
22- aprendemos a usar as funçoes, a criar funções como void soma(int n1, int n2)
24- aprendemos que podemos deixar um valor padrão na função para caso ela nao seja chamada sempre ter um valor padrão e não ficar em branco, quase contrario, se ela for chamada com outro valor, esse valor vai sobrepor o padrão.
25- confesso que nao entendi muito bem, é sobre funções recursivas, é muito confuso porem dá pra entender, acho que não usaria muito pois ocupa muito espaço na memoria do computador.
27- como funciona o enum, voce cria uma variavel armas, e coloca o que quiser la dentro com valores declarados ou não, dentro de enum armas vai ter fuzil, revolver, rifle e escopeta. depois a variavel armas vai ter uma variavel declarada isso mesmo, uma variavel criando outra, que é armaSel, a armaSel vai receber um valo por exemplo armaSel = rifle; entao o cout da armaSel vai ser o valor que estava armazenado no rifle la no enum.
28- aprendemos a usar stack ou o "tubo", primeiro é apresentado a biblioteca stack, e basicamente no tubo, logicamente tudo que entra primeiro, sai por ultimo... já que é um tubo, aprendemos a declarar o stack stack <tipo da variavel> nome da stack; (stack <string> cartas;), então aprendemos comandos como o push, que serve para inserir valores dentro de cartas, cartas.pop para retirar o valor que está no topo, empty para saber se a stack cartas esta vazia, size mostra o tamanho da pilha.
30- agora é a biblioteca queue, neste caso seria a fila, então tudo que entra primeiro sai primeiro, com os mesmos comandos do anterios, push, pop e tc, mas agora adicionam mais comandos usando fronte e back, porque como é uma fila, voce pode ver quem está atras e quem está na frente.
31 1.2- biblioteca lista <list> que obviamente faz a lista, porem podemos criar um ::iterator it, porque podemos adicionar algo no meio da lista, mas basimente os comandos são os mesmos, o que muda é como eles funcionam, basta um pouco de raciocinio logico, os novos comandos dessa aula são .erase clear e merge, erase apaga um valor, clear limpa tudo e nao sobra mais nada e o merge mistura uma lista com a outra e vira somente uma
33 1.2.3- aprendemos sobre a variavel struct, onde você pode criar nessa estrutura varios requsitos, por exemplo struct Carro vai ter o nome, modelo, potencia e velocidade maxima e a velocidade daquele momento, o struct é só uma strutura então podemos criar varias variaveis com essa estrutura, usando Carro (nome da estruct)car1(nome da variavel), agora que voce pode inserir valores dentro de car1, assim como car2, car3 e assim por diante então é só dar cout em car1.nome por exemplo, qualquer duvida so olhar os codigos da pasta.

